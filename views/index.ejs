<!DOCTYPE html>
  <html lang="en">

  <head>
    <title>Index</title>
    <% include partials/head %>
    <script src="/d3.min.js"></script>
    <link rel="stylesheet" href="/css/chart.css">

  </head>

  <body class="container">
    <div class="col-md-6.col-md-offset-3">
      <section>
        <h1><%= name %></h1>
        <hr/>
        <div class="form-group">
          <label for="metricsGroupIDs">Metric group ID:</label>
          <select id="metricsGroupIDs" class="form-control" onchange="if(this.value != '') makeChart(this.value)">
            <option selected></option>
          </select>
        </div>
      </section>
      <section id="metrics"></section>
      <hr/>
      <section>
        <button class="btn btn-success" href="/newMetric" onClick='document.location.href="/newMetric"'>Add a new metric</button>
        <button class="btn btn-danger" href="/logout" onClick='document.location.href="/logout"'>Logout</button>
      </section>
    </div>


    <script>
      //Insère les id de métriques dans la combobox
      $.getJSON('/metrics', function(data) {
        for(let key in data)
          $('#metricsGroupIDs').append(`<option>${key}</option>`);
      });

      //Reconstruit le graphe en cas de redimensionnement de la fenêtre
      $(window).resize(function() {
        $('#metricsGroupIDs').change();
      });

      $('#metricsGroupIDs').change(function() {
        if($(this).val() === '')
        $('#metrics').html('');
      });


      /**
       * Récupère les métriques et construit le graphe
       * Adapté de cet exemple : http://bl.ocks.org/Jverma/887877fc5c2c2d99be10?fbclid=IwAR0aoPOYou6f0Xi6vKijmSMrW2zS0ZThGjkh0jGsPE3up-kKAXUzCARtIzA
       */
      function makeChart(metricGroupID) {
        // load the data
        $.getJSON(`/metrics/${metricGroupID}`, function(data) {
          const maxMetricValue = d3.max(data, function(d) { return d.value; });
          data.forEach(element => {
            element.timestamp = new Date(parseInt(element.timestamp)).toLocaleString();
          });

          // set the dimensions of the canvas
          const padding = {top: 30, right: 0, bottom: 110, left: 40},
              width = $('#metrics').width() - padding.left - padding.right,
              height = $(document).height()/1.75 - padding.top - padding.bottom;
      
          // set the ranges
          const x = d3.scale.ordinal().rangeRoundBands([0, width], .05);
          const y = d3.scale.linear().range([height, 0]);
      
          // define the axis
          const xAxis = d3.svg.axis()
              .scale(x)
              .orient('bottom')
              const yAxis = d3.svg.axis()
              .scale(y)
              .orient('left')
              .ticks(10*maxMetricValue/maxMetricValue);
      
          $('#metrics').html('');

          // add the SVG element
          const svg = d3.select('#metrics')
            .append('svg')
              .attr('width', width + padding.left + padding.right)
              .attr('height', height + padding.top + padding.bottom)
            .append('g')
              .attr('transform', `translate(${padding.left}, ${padding.top})`);

            // scale the range of the data
            x.domain(data.map(function(d) { return d.timestamp; }));
            y.domain([0, maxMetricValue]);
        
          // add axis
          svg.append('g')
              .attr('class', 'x axis')
              .attr('transform', `translate(0, ${height})`)
              .call(xAxis)
            .selectAll('text')
              .style('text-anchor', 'end')
              .attr('dx', '-.75em')
              .attr('dy', '.5em')
              .attr('transform', 'rotate(-45)');
        
          svg.append('g')
              .attr('class', 'y axis')
              .call(yAxis);
        
          // Add bar chart
          svg.selectAll('bar')
              .data(data)
            .enter().append('rect')
              .attr('class', 'bar')
              .attr('x', function(d) { return x(d.timestamp); })
              .attr('width', x.rangeBand())
              .attr('y', function(d) { return y(d.value); })
              .attr('height', function(d) { return height - y(d.value); });

          //Bouton de suppression
          $('#metrics').append(`<button class="btn btn-warning" value="${metricGroupID}" onclick="deleteMetricGroup(this.value)">Delete metric group "${metricGroupID}"</button>`);
        });
      }

      function deleteMetricGroup(metricGroupID) {
        $.ajax({
          url: `/metrics/${metricGroupID}`,
          type: 'DELETE',
          success: function(result) {
            $('#metrics').html('');
            $("#metricsGroupIDs > option:selected").remove();
          }
        });
      }
    </script>

  </body>
</html>